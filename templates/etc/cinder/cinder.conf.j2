[DEFAULT]
rootwrap_config = /etc/cinder/rootwrap.conf
api_paste_confg = /etc/cinder/api-paste.ini
iscsi_helper = tgtadm
volume_name_template = volume-%s
volume_group = cinder-volumes
{% if openstack_cinder_verbose_logging is defined and openstack_cinder_verbose_logging %}
verbose = True
{% elif openstack_cinder_verbose_logging is defined and not openstack_cinder_verbose_logging %}
verbose = False
{% endif %}
auth_strategy = keystone
state_path = /var/lib/cinder
lock_path = /var/lock/cinder
volumes_dir = /var/lib/cinder/volumes
{% if inventory_hostname in groups['openstack-controller-nodes'] %}
rpc_backend = rabbit
my_ip={{ openstack_nova_my_ip }}
{% endif %}
{% if inventory_hostname in groups['openstack-storage-nodes'] %}
rpc_backend = rabbit
my_ip={{ openstack_nova_my_ip }}
enabled_backends = lvm
{%   if openstack_services_vip_fqdn is defined %}
glance_host = {{ openstack_services_vip_fqdn }}
{%   elif openstack_services_vip_fqdn is not defined and openstack_services_vip is defined %}
glance_host = {{ openstack_services_vip }}
{%   endif %}
{% endif %}

[database]
{% if inventory_hostname in groups['openstack-controller-nodes'] %}
connection = mysql://cinder:{{ openstack_cinder_dbpass }}@{{ openstack_cinder_dbhost }}/cinder
{% endif %}
{% if inventory_hostname in groups['openstack-storage-nodes'] %}
connection = mysql://cinder:{{ openstack_cinder_dbpass }}@{{ openstack_cinder_dbhost }}/cinder
{% endif %}

[keystone_authtoken]
{% if inventory_hostname in groups['openstack-controller-nodes'] %}
auth_uri = {{ openstack_keystone_url }}:5000
auth_url = {{ openstack_keystone_url }}:35357
auth_plugin = password
project_domain_id = default
user_domain_id = default
project_name = service
username = cinder
password = {{ openstack_cinder_pass }}
{% endif %}
{% if inventory_hostname in groups['openstack-storage-nodes'] %}
auth_uri = {{ openstack_keystone_url }}:5000
auth_url = {{ openstack_keystone_url }}:35357
auth_plugin = password
project_domain_id = default
user_domain_id = default
project_name = service
username = cinder
password = {{ openstack_cinder_pass }}
{% endif %}

[lvm]
{% if inventory_hostname in groups['openstack-storage-nodes'] %}
volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
volume_group = cinder-volumes
iscsi_protocol = iscsi
iscsi_helper = tgtadm
{% endif %}

[oslo_concurrency]
lock_path = /var/lock/cinder

[oslo_messaging_rabbit]
{% if inventory_hostname in groups['openstack-controller-nodes'] %}
rabbit_host = {{ openstack_rabbit_host }}
rabbit_userid = {{ openstack_rabbit_user }}
rabbit_password = {{ openstack_rabbit_pass }}
{% endif %}
{% if inventory_hostname in groups['openstack-storage-nodes'] %}
rabbit_host = {{ openstack_rabbit_host }}
rabbit_userid = {{ openstack_rabbit_user }}
rabbit_password = {{ openstack_rabbit_pass }}
{% endif %}

# RabbitMQ HA cluster host:port pairs. (list value)
# Deprecated group/name - [DEFAULT]/rabbit_hosts
#rabbit_hosts = $rabbit_host:$rabbit_port
{% if openstack_multi_controller_setup is defined and openstack_multi_controller_setup %}
rabbit_hosts={% for host in groups['openstack-controller-nodes'] %}{{ host }}:5672{% if not loop.last %},{% endif %}{% endfor %}

{% endif %}

# Use HA queues in RabbitMQ (x-ha-policy: all). If you change this option, you
# must wipe the RabbitMQ database. (boolean value)
# Deprecated group/name - [DEFAULT]/rabbit_ha_queues
#rabbit_ha_queues = false
{% if openstack_multi_controller_setup is defined and openstack_multi_controller_setup %}
rabbit_durable_queues=true
rabbit_ha_queues=true
{% endif %}
