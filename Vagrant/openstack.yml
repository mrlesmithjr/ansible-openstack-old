---
# Bootstrap Hosts
- name: Bootstrapping Hosts
  hosts: openstack-nodes
  any_errors_fatal: true  #Added this to ensure plays will stop completely in case of failure. We want to do this in order to not cause issues in remaining plays.
  become: true
  vars:
  roles:
    - role: ansible-bootstrap
      tags:
        - bootstrap
    - role: ansible-users
      tags:
        - bootstrap
    - role: ansible-manage-ssh-keys
      tags:
        - bootstrap

- name: Ensure Hostnames are correct and reboot if needed
  hosts: openstack-nodes
  any_errors_fatal: true
  become: true
  vars:
  roles:
    - role: ansible-change-hostname

- name: Updating /etc/hosts
  hosts: all
  any_errors_fatal: true
  become: true
  vars:
  roles:
  tasks:
    - name: updating /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: "^{{ hostvars[item].ansible_ssh_host }} {{ item }} {{ item }}.{{ pri_domain_name }}"
        line: "{{ hostvars[item].ansible_ssh_host }} {{ item }} {{ item }}.{{ pri_domain_name }}"
        state: present
      with_items: groups['all']

    - name: updating /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: "^{{ openstack_services_vip }} {{ openstack_services_vip_fqdn }}"
        line: "{{ openstack_services_vip }} {{ openstack_services_vip_fqdn }}"
        state: present

- name: Setting Up Base Apps
  hosts: openstack-nodes
  any_errors_fatal: true
  become: true
  vars:
  roles:
    - role: ansible-base
    - role: ansible-config-interfaces
    - role: ansible-ntp
    - role: ansible-rsyslog
    - role: ansible-postfix
    - role: ansible-snmpd
    - role: ansible-timezone

- name: Setting up ELK
  hosts: logstash
  any_errors_fatal: true
  become: true
  vars:
  roles:
    - role: ansible-elasticsearch
    - role: ansible-redis
    - role: ansible-logstash

- name: Setting up (openstack-haproxy-nodes)
  hosts: openstack-haproxy-nodes
  any_errors_fatal: true
  become: true
  vars:
  roles:
    - role: ansible-haproxy
    - role: ansible-pacemaker
      when: (openstack_multi_controller_setup is defined and openstack_multi_controller_setup)

- name: Setting up (openstack-controller-nodes)
  hosts: openstack-controller-nodes
  any_errors_fatal: true
  become: true
  vars:
  roles:
    - role: ansible-apache2
    - role: ansible-mariadb-mysql
      when: (openstack_multi_controller_setup is defined and not openstack_multi_controller_setup)
    - role: ansible-mariadb-galera-cluster
      when: (openstack_multi_controller_setup is defined and openstack_multi_controller_setup)
    - role: ansible-memcached
    - role: ansible-rabbitmq
    - role: ansible-pacemaker
      when: (openstack_multi_controller_setup is defined and openstack_multi_controller_setup)

- name: Setting up (openstack-compute-nodes)
  hosts: openstack-compute-nodes
  any_errors_fatal: true
  become: true
  vars:
  roles:
    - role: ansible-manage-lvm

- name: Setting up (openstack-storage-nodes)
  hosts: openstack-storage-nodes
  any_errors_fatal: true
  become: true
  vars:
  roles:
    - role: ansible-manage-lvm

- name: Builds OpenStack Environment
  hosts: openstack-nodes
  any_errors_fatal: true
  become: true
  vars:
  roles:
    - role: ansible-openstack
  tags:
    - openstack
  tasks:

####################
- name: Local Tasks
  hosts: localhost
  connection: local
  become: false
  vars:
    - openstack_keystone_url: 'http://{{ openstack_services_vip_fqdn }}'
    - openstack_services_vip_fqdn: 'openstack.{{ pri_domain_name }}'
  tasks:
    - name: creating client script(s)  #creating this to source in order to create heat domain
      template:
        src: "templates/{{ item }}-openrc.sh.j2"
        dest: "./{{ item }}-openrc.sh"
        mode: 0700
      tags:
        - create-openstack-client-scripts
      with_items:
        - admin
        - demo

################################
- name: manage glance images
  hosts: localhost
  connection: local
  become: false
  vars:
    - openstack_glance_images:  #define cloud images to automatically upload to Glance
        - name: cirros
          container_format: bare
          disk_format: qcow2
          image_url: http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
          installed: true
        - name: Fedora-22
          container_format: bare
          disk_format: qcow2
          image_url: http://repo.atlantic.net/fedora/linux/releases/22/Cloud/x86_64/Images/Fedora-Cloud-Base-22-20150521.x86_64.qcow2
          installed: true
        - name: Ubuntu-14.04
          container_format: bare
          disk_format: qcow2
          image_url: https://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img
          installed: true
    - openstack_glance_manage_images: true
  tasks:
    - name: installing Openstack Python Client tools
      become: true
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - python-openstackclient
      when: ansible_os_family == "Debian"

#    - name: uploading glance images
#      glance_image:
#        auth_url: "{{ openstack_keystone_auth_url }}"  #defined in group_vars/all/openstack_auth_urls.yml
#        login_username: admin
#        login_password: "{{ openstack_admin_pass }}"  #defined in group_vars/all/accounts.yml
#        login_tenant_name: admin
#        name: "{{ item.name }}"
#        container_format: "{{ item.container_format }}"
#        disk_format: "{{ item.disk_format }}"
#        state: present
#        copy_from: "{{ item.image_url }}"
#      tags:
#        - manage_glance_images
#      with_items: openstack_glance_images
#      when: (openstack_glance_manage_images is defined and openstack_glance_manage_images) and (item.installed is defined and item.installed)

#    - name: manage_glance_images | removing glance images
#      glance_image:
#        auth_url: "{{ openstack_keystone_auth_url }}"   #defined in group_vars/all/openstack_auth_urls.yml
#        login_username: admin
#        login_password: "{{ openstack_admin_pass }}"  #defined in group_vars/all/accounts.yml
#        login_tenant_name: admin
#        name: "{{ item.name }}"
#        state: absent
#      tags:
#        - manage_glance_images
#      with_items: openstack_glance_images
#      when: (openstack_glance_manage_images is defined and openstack_glance_manage_images) and (item.installed is defined and not item.installed)
